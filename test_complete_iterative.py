#!/usr/bin/env python3
"""
üéØ ◊ë◊ì◊ô◊ß◊î ◊û◊ú◊ê◊î ◊©◊ú ◊î◊û◊¢◊®◊õ◊™ ◊î◊ò◊ô◊ò◊®◊ò◊ô◊ë◊ô◊™ ◊î◊û◊ï◊©◊ú◊û◊™
"""

import sys
sys.path.append('.')
import logging

def test_complete_iterative_system():
    print("üéØ Testing COMPLETE Iterative Training System")
    print("=" * 60)
    
    # ◊î◊í◊ì◊®◊™ logging
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    
    # ◊ô◊ô◊ë◊ï◊ê ◊î◊û◊¢◊®◊õ◊™
    from ml.iterative_training_system import IterativeHistoricalTrainer, IterativeTrainingConfig
    from data.data_utils import load_json
    import os
    
    # ◊ò◊¢◊ô◊†◊™ ◊†◊™◊ï◊†◊ô◊ù
    print("üìä Loading sample data...")
    data_map = {}
    data_folder = 'data backup'
    # ◊†◊ß◊ó ◊®◊ß 3 ◊û◊†◊ô◊ï◊™ ◊ú◊ë◊ì◊ô◊ß◊î ◊û◊î◊ô◊®◊î
    sample_files = [f for f in os.listdir(data_folder) if f.endswith('.json')][:3]
    
    for f in sample_files:
        try:
            df = load_json(os.path.join(data_folder, f))
            symbol = f.replace('.json', '')
            data_map[symbol] = df
            print(f"  ‚úÖ {symbol}: {len(df)} rows ({df.index.min()} ‚Üí {df.index.max()})")
        except Exception as e:
            print(f"  ‚ùå {f}: {e}")
    
    if not data_map:
        print("‚ùå No data loaded")
        return False
    
    # ◊™◊¶◊ï◊®◊î ◊ú◊ë◊ì◊ô◊ß◊î ◊û◊î◊ô◊®◊î
    config = IterativeTrainingConfig(
        initial_lookback_days=90,  # ◊î◊™◊ó◊ú ◊¢◊ù 90 ◊ô◊û◊ô ◊û◊°◊ó◊® (◊õ-4 ◊ó◊ï◊ì◊©◊ô◊ù)
        horizons=[5],  # ◊®◊ß horizon ◊ê◊ó◊ì ◊ú◊ë◊ì◊ô◊ß◊î ◊û◊î◊ô◊®◊î
        max_iterations=2,  # ◊®◊ß 2 ◊ê◊ô◊ò◊®◊¶◊ô◊ï◊™ ◊ú◊ë◊ì◊ô◊ß◊î
        min_accuracy_improvement=0.005,  # 0.5% ◊©◊ô◊§◊ï◊® ◊û◊ô◊†◊ô◊û◊ú◊ô
        target_accuracy=0.60  # ◊ô◊¢◊ì ◊†◊û◊ï◊ö ◊ú◊ë◊ì◊ô◊ß◊î
    )
    
    print(f"\nüìã Configuration:")
    print(f"  Initial lookback: {config.initial_lookback_days} trading days")
    print(f"  Horizons: {config.horizons}")
    print(f"  Max iterations: {config.max_iterations}")
    print(f"  Target accuracy: {config.target_accuracy}")
    print(f"  Min improvement: {config.min_accuracy_improvement}")
    
    # ◊ô◊¶◊ô◊®◊™ ◊î◊û◊¢◊®◊õ◊™
    trainer = IterativeHistoricalTrainer(data_map)
    
    print(f"\nüöÄ Starting iterative training process...")
    print("=" * 60)
    
    try:
        # ◊î◊®◊¶◊™ ◊î◊™◊î◊ú◊ô◊ö ◊î◊ò◊ô◊ò◊®◊ò◊ô◊ë◊ô ◊î◊û◊ú◊ê!
        results = trainer.run_iterative_training(config)
        
        print("\n" + "=" * 60)
        print("üéâ ITERATIVE TRAINING COMPLETED!")
        print("=" * 60)
        
        if results:
            print(f"üìä Summary: {len(results)} iterations completed")
            
            for i, result in enumerate(results, 1):
                print(f"\nüìà Iteration #{i}:")
                print(f"  üìÖ Training cutoff: {result.training_cutoff_date}")
                print(f"  üìÖ Validation: {result.validation_start_date} ‚Üí {result.validation_end_date}")
                print(f"  üß† Models trained: {list(result.models_trained.keys())}")
                print(f"  üîÆ Predictions made: {len(result.predictions)}")
                print(f"  üìä Results collected: {len(result.actual_results)}")
                
                # ◊î◊¶◊í◊™ ◊ì◊ô◊ï◊ß ◊ú◊õ◊ú horizon
                for horizon, accuracy in result.accuracy_by_horizon.items():
                    print(f"  üìä {horizon}D Accuracy: {accuracy:.3f} ({accuracy*100:.1f}%)")
                
                if result.improvement_from_previous is not None:
                    direction = "üìà" if result.improvement_from_previous > 0 else "üìâ"
                    print(f"  {direction} Improvement: {result.improvement_from_previous:.3f}")
            
            # ◊î◊¶◊í◊™ ◊î◊û◊í◊û◊î
            accuracies = []
            for result in results:
                avg_acc = sum(result.accuracy_by_horizon.values()) / len(result.accuracy_by_horizon)
                accuracies.append(avg_acc)
            
            print(f"\nüìà Accuracy Trend:")
            for i, acc in enumerate(accuracies, 1):
                print(f"  Iteration {i}: {acc:.3f} ({acc*100:.1f}%)")
            
            if len(accuracies) > 1:
                total_improvement = accuracies[-1] - accuracies[0]
                print(f"  Total improvement: {total_improvement:.3f} ({total_improvement*100:.1f}%)")
        
        else:
            print("‚ùå No results returned")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Iterative training failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_complete_iterative_system()
    print(f"\n{'‚úÖ TEST PASSED' if success else '‚ùå TEST FAILED'}")